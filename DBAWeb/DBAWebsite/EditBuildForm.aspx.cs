using System;
using System.Collections.Generic;
using System.Configuration;
using System.Data;
using System.Data.SqlClient;
using System.Linq;
using System.Web;
using System.Web.UI;
using System.Web.UI.WebControls;
using DBAWebsite.APP;

namespace DBAWebsite
{
    public partial class EditBuildForm : System.Web.UI.Page
    {
        protected void Page_Load(object sender, EventArgs e)
        {
            if (!Page.IsPostBack)
            {
                if (Application["Build_Server_Name"] != null)
                    lblhead_servername.Text = Application["Build_Server_Name"].ToString();

                editBuildForm_lables_DataBinding();
                buildForm_lables_DataBinding();
                backup_type_Inventory_DataBinding();

                Inventory_Number_autovalue.Text = "Autogenerated";
                Server_name_autovalue.Text = lblhead_servername.Text;

                Resource_name_dropdownlist_DataBinding();
                sql_version_dropdownlist_DataBinding();
                monitor_tool_dropdownlist_DataBinding();
                high_availability_dropdownlist_DataBinding();

                dbadb_create_dropdownlist_DataBinding();
                memory_capped_dropdownlist_DataBinding();
                Initial_backup_dropdownlist_DataBinding();
                backup_scheduled_dropdownlist_DataBinding();
                drive_layout_dropdownlist_DataBinding();
                processors_core_acknowledge_dropdownlist_DataBinding();
                mail_setup_dropdownlist_DataBinding();

                servermemory_dropdownlist_DataBinding();
                serveradmin_dropdownlist_DataBinding();
                services_dropdownlist_DataBinding();
                maintenance_dropdownlist_DataBinding();
                pagelock_dropdownlist_DataBinding();
                version_dropdownlist_DataBinding();
                maxdop_dropdownlist_DataBinding();
                threshold_dropdownlist_DataBinding();
                mixedmode_dropdownlist_DataBinding();
                countset_dropdownlist_DataBinding();
                traceflag_dropdownlist_DataBinding();
                jobsverified_dropdownlist_DataBinding();
                jobssuccessful_dropdownlist_DataBinding();
                agentalerts_dropdownlist_DataBinding();
                securitysetup_dropdownlist_DataBinding();
                accountscorrect_dropdownlist_DataBinding();
                accountsstored_dropdownlist_DataBinding();
            }
            else
            {
                string datepickervalue = Request.Form["txtDate_build"];
                inpHide_build.Value = datepickervalue;
            }
        }


        protected void editBuildForm_lables_DataBinding()
        {
            DataTable editBuildFormlable_Info = new DataTable();

            using (SqlConnection con = new SqlConnection(ConfigurationManager.ConnectionStrings["myConnectionString"].ConnectionString))
            {

                try
                {
                    SqlCommand sqlCmd = new SqlCommand("select * from [dbo].[BUILDFORM] where servername = @servername", con);
                    sqlCmd.Parameters.AddWithValue("@servername", lblhead_servername.Text);
                    SqlDataAdapter adapter = new SqlDataAdapter(sqlCmd);

                    adapter.Fill(editBuildFormlable_Info);

                    if (editBuildFormlable_Info.Rows.Count > 0)
                    {
                        lbl_resource_name_old.Text = editBuildFormlable_Info.Rows[0]["BuildResource"].ToString();
                        lbl_dbadb_create_old.Text = editBuildFormlable_Info.Rows[0]["dbadbCreated"].ToString();
                        lbl_memory_capped_old.Text = editBuildFormlable_Info.Rows[0]["MemoryCapped"].ToString();
                        ldl_Initial_backup_old.Text = editBuildFormlable_Info.Rows[0]["InitialBackup"].ToString();
                        lbl_backup_scheduled_old.Text = editBuildFormlable_Info.Rows[0]["BackupScheduled"].ToString();
                        lbl_expected_golivedate_notes.Text = editBuildFormlable_Info.Rows[0]["GOLiveDate"].ToString();
                        lbl_drive_layout_old.Text = editBuildFormlable_Info.Rows[0]["FollowDriveLayout"].ToString();
                        lbl_sql_version_old.Text = editBuildFormlable_Info.Rows[0]["SQLVersion"].ToString();
                        lbl_monitor_tool_old.Text = editBuildFormlable_Info.Rows[0]["MonitoringTool"].ToString();
                        lbl_high_availability_old.Text = editBuildFormlable_Info.Rows[0]["HighAvailability"].ToString();
                        lbl_processors_core_acknowledge_old.Text = editBuildFormlable_Info.Rows[0]["No.ofProcessorsandcores"].ToString();
                        lbl_mail_setup_old.Text = editBuildFormlable_Info.Rows[0]["MailSetup"].ToString();

                        lbl_memory_correct.Text = editBuildFormlable_Info.Rows[0]["MemoryCorrect"].ToString();
                        lbl_admin_set.Text = editBuildFormlable_Info.Rows[0]["ServerAdministrators"].ToString();
                        lbl_services_disabled.Text = editBuildFormlable_Info.Rows[0]["ServicesDisabled"].ToString();
                        lbl_tasks_set.Text = editBuildFormlable_Info.Rows[0]["MaintenanceSet"].ToString();
                        lbl_pages_locked.Text = editBuildFormlable_Info.Rows[0]["PagesLocked"].ToString();
                        lbl_version_correct.Text = editBuildFormlable_Info.Rows[0]["VersionCorrect"].ToString();
                        lbl_maxdop_set.Text = editBuildFormlable_Info.Rows[0]["MaxdopSet"].ToString();
                        lbl_threshold.Text = editBuildFormlable_Info.Rows[0]["CostThreshold"].ToString();
                        lbl_mixedmode.Text = editBuildFormlable_Info.Rows[0]["AuthenticationMode"].ToString();
                        lbl_countset.Text = editBuildFormlable_Info.Rows[0]["CountSet"].ToString();
                        lbl_traceflag.Text = editBuildFormlable_Info.Rows[0]["TraceFlag"].ToString();
                        lbl_verified.Text = editBuildFormlable_Info.Rows[0]["JobsVerified"].ToString();
                        lbl_successful.Text = editBuildFormlable_Info.Rows[0]["JobsSucessful"].ToString();
                        lbl_agentalerts.Text = editBuildFormlable_Info.Rows[0]["AgentAlerts"].ToString();
                        lbl_securitysetup.Text = editBuildFormlable_Info.Rows[0]["SecuritySetup"].ToString();
                        lbl_accountscorrect.Text = editBuildFormlable_Info.Rows[0]["AccountsCorrect"].ToString();
                        lbl_accountsstored.Text = editBuildFormlable_Info.Rows[0]["AccountsStored"].ToString();


                    }

                }
                catch (Exception ex)
                {

                }

            }
        }

        protected void buildForm_lables_DataBinding()
        {
            DataTable buildFormlable_Info = new DataTable();

            using (SqlConnection con = new SqlConnection(ConfigurationManager.ConnectionStrings["myConnectionString"].ConnectionString))
            {

                try
                {
                    SqlCommand sqlCmd = new SqlCommand("select * from [dbo].[AInventoryInfo] where servername = @servername", con);
                    sqlCmd.Parameters.AddWithValue("@servername", lblhead_servername.Text);
                    SqlDataAdapter adapter = new SqlDataAdapter(sqlCmd);

                    adapter.Fill(buildFormlable_Info);

                    if (buildFormlable_Info.Rows.Count > 0)
                    {
                        Server_Memory_autovalue.Text = buildFormlable_Info.Rows[0]["TotalPhysicalMemoryGB"].ToString();
                        SQL_Memory_autovalue.Text = buildFormlable_Info.Rows[0]["MAXServerMemoryMB"].ToString();
                        Service_account_autovalue.Text = buildFormlable_Info.Rows[0]["serviceaccount"].ToString();
                        install_date.Text = buildFormlable_Info.Rows[0]["SQLInstallDate"].ToString();
                        processors_count_autovalue.Text = buildFormlable_Info.Rows[0]["NumberOfProcessors"].ToString();
                        cores_count_autovalue.Text = buildFormlable_Info.Rows[0]["NumberOfLogicalProcessors"].ToString();
                        dbadb_autovalue.Text = buildFormlable_Info.Rows[0]["DBA_DB"].ToString();

                        string sqlversion_short = buildFormlable_Info.Rows[0]["SQLVersionShort"].ToString();
                        string sqledition = buildFormlable_Info.Rows[0]["SQLedition"].ToString();
                        sql_version_autovalue.Text = sqlversion_short + " -- " + sqledition;

                        string drivelayout = buildFormlable_Info.Rows[0]["driveinfo"].ToString();
                        string[] temp = drivelayout.Split(';');
                        System.Text.StringBuilder sb = new System.Text.StringBuilder();
                        foreach (string drive in temp)
                        {
                            string firstChar = drive.Substring(0, 1);
                            sb.Append(firstChar);
                            sb.Append("  ");
                        }

                        drive_layout_autovalue.Text = sb.ToString();
                    }

                }
                catch (Exception ex)
                {

                }

            }
        }

        protected void backup_type_Inventory_DataBinding()
        {
            DataTable backupType_Inventory = new DataTable();

            using (SqlConnection con = new SqlConnection(ConfigurationManager.ConnectionStrings["myConnectionString"].ConnectionString))
            {

                try
                {
                    SqlCommand sqlCmd = new SqlCommand("select [BackupType], [BackupType_Notes] from [InventoryForm] where servername = @servername", con);
                    sqlCmd.Parameters.AddWithValue("@servername", lblhead_servername.Text);
                    SqlDataAdapter adapter = new SqlDataAdapter(sqlCmd);

                    adapter.Fill(backupType_Inventory);

                    if (backupType_Inventory.Rows.Count > 0)
                    {
                        string tempValue = backupType_Inventory.Rows[0]["BackupType"].ToString();
                        if (!tempValue.Equals("other"))
                            backup_type_autovalue.Text = tempValue;
                        else
                            backup_type_autovalue.Text = backupType_Inventory.Rows[0]["BackupType_Notes"].ToString();
                    }
                }
                catch (Exception ex)
                {

                }

            }
        }

        protected void Resource_name_dropdownlist_DataBinding()
        {
            DataTable resourcename_info = new DataTable();


            SqlDataReader reader;
            using (SqlConnection conn = new SqlConnection(ConfigurationManager.ConnectionStrings["myConnectionString"].ConnectionString))
            using (SqlCommand cmd = new SqlCommand("usp_WebFormSelect", conn))
            {
                try
                {
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.Parameters.Add("@query", SqlDbType.VarChar).Value = "resourcename";
                    conn.Open();
                    reader = cmd.ExecuteReader();
                    resourcename_info.Load(reader);
                    Resource_name_dropdownlist.DataSource = resourcename_info;
                    Resource_name_dropdownlist.DataTextField = "Resource Name";
                    Resource_name_dropdownlist.DataValueField = "Resource Name";
                    Resource_name_dropdownlist.DataBind();
                    Logging.LogInfo("Successful binding on: Build Dropdown", true);
                }
                catch (Exception ex)
                {
                    Logging.LogException(ex, "Error while executing the SP: usp_WebFormSelect");
                }
            }

        }

        protected void dbadb_create_dropdownlist_DataBinding()
        {
            DataTable build_dbadb_info = new DataTable();

            SqlDataReader reader;
            using (SqlConnection conn = new SqlConnection(ConfigurationManager.ConnectionStrings["myConnectionString"].ConnectionString))
            using (SqlCommand cmd = new SqlCommand("usp_WebFormSelect", conn))
            {

                try
                {
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.Parameters.Add("@query", SqlDbType.VarChar).Value = "dbadbcreated";
                    conn.Open();
                    reader = cmd.ExecuteReader();
                    build_dbadb_info.Load(reader);

                    dbadb_create_dropdownlist.DataSource = build_dbadb_info;
                    dbadb_create_dropdownlist.DataTextField = "DbadbCreated";
                    dbadb_create_dropdownlist.DataValueField = "DbadbCreated";
                    dbadb_create_dropdownlist.DataBind();
                }
                catch (Exception ex)
                {
                    Logging.LogException(ex, "Error while binding drop down list");
                }

            }
        }

        protected void memory_capped_dropdownlist_DataBinding()
        {
            DataTable build_memoryCapped_info = new DataTable();

            SqlDataReader reader;
            using (SqlConnection conn = new SqlConnection(ConfigurationManager.ConnectionStrings["myConnectionString"].ConnectionString))
            using (SqlCommand cmd = new SqlCommand("usp_WebFormSelect", conn))
            {

                try
                {
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.Parameters.Add("@query", SqlDbType.VarChar).Value = "memorycapped";
                    conn.Open();
                    reader = cmd.ExecuteReader();
                    build_memoryCapped_info.Load(reader);

                    memory_capped_dropdownlist.DataSource = build_memoryCapped_info;
                    memory_capped_dropdownlist.DataTextField = "MemoryCapped";
                    memory_capped_dropdownlist.DataValueField = "MemoryCapped";
                    memory_capped_dropdownlist.DataBind();
                }
                catch (Exception ex)
                {
                    Logging.LogException(ex, "Error while binding drop down list");
                }

            }
        }

        protected void Initial_backup_dropdownlist_DataBinding()
        {
            DataTable build_initialBackup_info = new DataTable();

            SqlDataReader reader;
            using (SqlConnection conn = new SqlConnection(ConfigurationManager.ConnectionStrings["myConnectionString"].ConnectionString))
            using (SqlCommand cmd = new SqlCommand("usp_WebFormSelect", conn))
            {

                try
                {
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.Parameters.Add("@query", SqlDbType.VarChar).Value = "initialbackupdropdown";
                    conn.Open();
                    reader = cmd.ExecuteReader();
                    build_initialBackup_info.Load(reader);

                    Initial_backup_dropdownlist.DataSource = build_initialBackup_info;
                    Initial_backup_dropdownlist.DataTextField = "InitialBackup";
                    Initial_backup_dropdownlist.DataValueField = "InitialBackup";
                    Initial_backup_dropdownlist.DataBind();
                }
                catch (Exception ex)
                {
                    Logging.LogException(ex, "Error while binding drop down list");
                }

            }
        }

        protected void backup_scheduled_dropdownlist_DataBinding()
        {
            DataTable build_backupScheduled_info = new DataTable();

            SqlDataReader reader;
            using (SqlConnection conn = new SqlConnection(ConfigurationManager.ConnectionStrings["myConnectionString"].ConnectionString))
            using (SqlCommand cmd = new SqlCommand("usp_WebFormSelect", conn))
            {

                try
                {
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.Parameters.Add("@query", SqlDbType.VarChar).Value = "scheduledbackupdropdown";
                    conn.Open();
                    reader = cmd.ExecuteReader();
                    build_backupScheduled_info.Load(reader);

                    backup_scheduled_dropdownlist.DataSource = build_backupScheduled_info;
                    backup_scheduled_dropdownlist.DataTextField = "BackupScheduled";
                    backup_scheduled_dropdownlist.DataValueField = "BackupScheduled";
                    backup_scheduled_dropdownlist.DataBind();
                }
                catch (Exception ex)
                {
                    Logging.LogException(ex, "Error while binding drop down list");
                }

            }
        }

        protected void drive_layout_dropdownlist_DataBinding()
        {
            DataTable build_driveLayout_info = new DataTable();

            SqlDataReader reader;
            using (SqlConnection conn = new SqlConnection(ConfigurationManager.ConnectionStrings["myConnectionString"].ConnectionString))
            using (SqlCommand cmd = new SqlCommand("usp_WebFormSelect", conn))
            {

                try
                {
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.Parameters.Add("@query", SqlDbType.VarChar).Value = "drivelayoutdropdown";
                    conn.Open();
                    reader = cmd.ExecuteReader();
                    build_driveLayout_info.Load(reader);

                    drive_layout_dropdownlist.DataSource = build_driveLayout_info;
                    drive_layout_dropdownlist.DataTextField = "FollowDriveLayout";
                    drive_layout_dropdownlist.DataValueField = "FollowDriveLayout";
                    drive_layout_dropdownlist.DataBind();
                }
                catch (Exception ex)
                {
                    Logging.LogException(ex, "Error while binding drop down list");
                }

            }
        }

        protected void sql_version_dropdownlist_DataBinding()
        {
            DataTable sqlversion_info = new DataTable();

            SqlDataReader reader;
            using (SqlConnection conn = new SqlConnection(ConfigurationManager.ConnectionStrings["myConnectionString"].ConnectionString))
            using (SqlCommand cmd = new SqlCommand("usp_WebFormSelect", conn))
            {

                try
                {
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.Parameters.Add("@query", SqlDbType.VarChar).Value = "sqlversion";
                    conn.Open();
                    reader = cmd.ExecuteReader();
                    sqlversion_info.Load(reader);

                    sql_version_dropdownlist.DataSource = sqlversion_info;
                    sql_version_dropdownlist.DataTextField = "SQl Version";
                    sql_version_dropdownlist.DataValueField = "SQl Version";
                    sql_version_dropdownlist.DataBind();
                }
                catch (Exception ex)
                {
                    Logging.LogException(ex, "Error while binding drop down list");
                }

            }
        }

        protected void monitor_tool_dropdownlist_DataBinding()
        {
            DataTable monitortool_info = new DataTable();

            SqlDataReader reader;
            using (SqlConnection conn = new SqlConnection(ConfigurationManager.ConnectionStrings["myConnectionString"].ConnectionString))
            using (SqlCommand cmd = new SqlCommand("usp_WebFormSelect", conn))
            {

                try
                {
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.Parameters.Add("@query", SqlDbType.VarChar).Value = "monitoringtool";
                    conn.Open();
                    reader = cmd.ExecuteReader();
                    monitortool_info.Load(reader);

                    monitor_tool_dropdownlist.DataSource = monitortool_info;
                    monitor_tool_dropdownlist.DataTextField = "Monitoring Tool";
                    monitor_tool_dropdownlist.DataValueField = "Monitoring Tool";
                    monitor_tool_dropdownlist.DataBind();
                }
                catch (Exception ex)
                {
                    Logging.LogException(ex, "Error while binding drop down list");
                }

            }
        }

        protected void high_availability_dropdownlist_DataBinding()
        {
            DataTable highavailability_info = new DataTable();

            SqlDataReader reader;
            using (SqlConnection conn = new SqlConnection(ConfigurationManager.ConnectionStrings["myConnectionString"].ConnectionString))
            using (SqlCommand cmd = new SqlCommand("usp_WebFormSelect", conn))
            {

                try
                {
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.Parameters.Add("@query", SqlDbType.VarChar).Value = "availabilitydropdown";
                    conn.Open();
                    reader = cmd.ExecuteReader();
                    highavailability_info.Load(reader);

                    high_availability_dropdownlist.DataSource = highavailability_info;
                    high_availability_dropdownlist.DataTextField = "High Availability";
                    high_availability_dropdownlist.DataValueField = "High Availability";
                    high_availability_dropdownlist.DataBind();
                }
                catch (Exception ex)
                {
                    Logging.LogException(ex, "Error while binding drop down list");
                }

            }
        }

        protected void processors_core_acknowledge_dropdownlist_DataBinding()
        {
            DataTable build_noofProcessorsCores_info = new DataTable();

            SqlDataReader reader;
            using (SqlConnection conn = new SqlConnection(ConfigurationManager.ConnectionStrings["myConnectionString"].ConnectionString))
            using (SqlCommand cmd = new SqlCommand("usp_WebFormSelect", conn))
            {

                try
                {
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.Parameters.Add("@query", SqlDbType.VarChar).Value = "numberprocessors";
                    conn.Open();
                    reader = cmd.ExecuteReader();
                    build_noofProcessorsCores_info.Load(reader);

                    processors_core_acknowledge_dropdownlist.DataSource = build_noofProcessorsCores_info;
                    processors_core_acknowledge_dropdownlist.DataTextField = "NoofProcessorsCores";
                    processors_core_acknowledge_dropdownlist.DataValueField = "NoofProcessorsCores";
                    processors_core_acknowledge_dropdownlist.DataBind();
                }
                catch (Exception ex)
                {
                    Logging.LogException(ex, "Error while binding drop down list");
                }

            }
        }

        protected void mail_setup_dropdownlist_DataBinding()
        {
            DataTable build_mailSetup_info = new DataTable();


            SqlDataReader reader;
            using (SqlConnection conn = new SqlConnection(ConfigurationManager.ConnectionStrings["myConnectionString"].ConnectionString))
            using (SqlCommand cmd = new SqlCommand("usp_WebFormSelect", conn))
            {

                try
                {
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.Parameters.Add("@query", SqlDbType.VarChar).Value = "mailsetup";
                    conn.Open();
                    reader = cmd.ExecuteReader();
                    build_mailSetup_info.Load(reader);

                    mail_setup_dropdownlist.DataSource = build_mailSetup_info;
                    mail_setup_dropdownlist.DataTextField = "MailSetup";
                    mail_setup_dropdownlist.DataValueField = "MailSetup";
                    mail_setup_dropdownlist.DataBind();
                }
                catch (Exception ex)
                {
                    Logging.LogException(ex, "Error while binding drop down list");
                }

            }
        }
        protected void servermemory_dropdownlist_DataBinding()
        {
            DataTable build_mailSetup_info = new DataTable();


            SqlDataReader reader;
            using (SqlConnection conn = new SqlConnection(ConfigurationManager.ConnectionStrings["myConnectionString"].ConnectionString))
            using (SqlCommand cmd = new SqlCommand("usp_WebFormSelect", conn))
            {

                try
                {
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.Parameters.Add("@query", SqlDbType.VarChar).Value = "mailsetup";
                    conn.Open();
                    reader = cmd.ExecuteReader();
                    build_mailSetup_info.Load(reader);

                    memory_correct_dropdownlist.DataSource = build_mailSetup_info;
                    memory_correct_dropdownlist.DataTextField = "MailSetup";
                    memory_correct_dropdownlist.DataValueField = "MailSetup";
                    memory_correct_dropdownlist.DataBind();
                }
                catch (Exception ex)
                {
                    Logging.LogException(ex, "Error while binding drop down list");
                }

            }
        }

        protected void serveradmin_dropdownlist_DataBinding()
        {
            DataTable build_mailSetup_info = new DataTable();


            SqlDataReader reader;
            using (SqlConnection conn = new SqlConnection(ConfigurationManager.ConnectionStrings["myConnectionString"].ConnectionString))
            using (SqlCommand cmd = new SqlCommand("usp_WebFormSelect", conn))
            {

                try
                {
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.Parameters.Add("@query", SqlDbType.VarChar).Value = "mailsetup";
                    conn.Open();
                    reader = cmd.ExecuteReader();
                    build_mailSetup_info.Load(reader);

                    admin_correct_dropdownlist.DataSource = build_mailSetup_info;
                    admin_correct_dropdownlist.DataTextField = "MailSetup";
                    admin_correct_dropdownlist.DataValueField = "MailSetup";
                    admin_correct_dropdownlist.DataBind();
                }
                catch (Exception ex)
                {
                    Logging.LogException(ex, "Error while binding drop down list");
                }

            }
        }

        protected void services_dropdownlist_DataBinding()
        {
            DataTable build_mailSetup_info = new DataTable();


            SqlDataReader reader;
            using (SqlConnection conn = new SqlConnection(ConfigurationManager.ConnectionStrings["myConnectionString"].ConnectionString))
            using (SqlCommand cmd = new SqlCommand("usp_WebFormSelect", conn))
            {

                try
                {
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.Parameters.Add("@query", SqlDbType.VarChar).Value = "mailsetup";
                    conn.Open();
                    reader = cmd.ExecuteReader();
                    build_mailSetup_info.Load(reader);

                    services_dropdownlist.DataSource = build_mailSetup_info;
                    services_dropdownlist.DataTextField = "MailSetup";
                    services_dropdownlist.DataValueField = "MailSetup";
                    services_dropdownlist.DataBind();
                }
                catch (Exception ex)
                {
                    Logging.LogException(ex, "Error while binding drop down list");
                }

            }
        }

        protected void maintenance_dropdownlist_DataBinding()
        {
            DataTable build_mailSetup_info = new DataTable();


            SqlDataReader reader;
            using (SqlConnection conn = new SqlConnection(ConfigurationManager.ConnectionStrings["myConnectionString"].ConnectionString))
            using (SqlCommand cmd = new SqlCommand("usp_WebFormSelect", conn))
            {

                try
                {
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.Parameters.Add("@query", SqlDbType.VarChar).Value = "mailsetup";
                    conn.Open();
                    reader = cmd.ExecuteReader();
                    build_mailSetup_info.Load(reader);

                    maintenance_dropdownlist.DataSource = build_mailSetup_info;
                    maintenance_dropdownlist.DataTextField = "MailSetup";
                    maintenance_dropdownlist.DataValueField = "MailSetup";
                    maintenance_dropdownlist.DataBind();
                }
                catch (Exception ex)
                {
                    Logging.LogException(ex, "Error while binding drop down list");
                }

            }
        }
        protected void pagelock_dropdownlist_DataBinding()
        {
            DataTable build_mailSetup_info = new DataTable();


            SqlDataReader reader;
            using (SqlConnection conn = new SqlConnection(ConfigurationManager.ConnectionStrings["myConnectionString"].ConnectionString))
            using (SqlCommand cmd = new SqlCommand("usp_WebFormSelect", conn))
            {

                try
                {
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.Parameters.Add("@query", SqlDbType.VarChar).Value = "mailsetup";
                    conn.Open();
                    reader = cmd.ExecuteReader();
                    build_mailSetup_info.Load(reader);

                    pagelock_dropdownlist.DataSource = build_mailSetup_info;
                    pagelock_dropdownlist.DataTextField = "MailSetup";
                    pagelock_dropdownlist.DataValueField = "MailSetup";
                    pagelock_dropdownlist.DataBind();
                }
                catch (Exception ex)
                {
                    Logging.LogException(ex, "Error while binding drop down list");
                }

            }
        }
        protected void version_dropdownlist_DataBinding()
        {
            DataTable build_mailSetup_info = new DataTable();


            SqlDataReader reader;
            using (SqlConnection conn = new SqlConnection(ConfigurationManager.ConnectionStrings["myConnectionString"].ConnectionString))
            using (SqlCommand cmd = new SqlCommand("usp_WebFormSelect", conn))
            {

                try
                {
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.Parameters.Add("@query", SqlDbType.VarChar).Value = "mailsetup";
                    conn.Open();
                    reader = cmd.ExecuteReader();
                    build_mailSetup_info.Load(reader);

                    version_dropdownlist.DataSource = build_mailSetup_info;
                    version_dropdownlist.DataTextField = "MailSetup";
                    version_dropdownlist.DataValueField = "MailSetup";
                    version_dropdownlist.DataBind();
                }
                catch (Exception ex)
                {
                    Logging.LogException(ex, "Error while binding drop down list");
                }

            }
        }

        protected void mixedmode_dropdownlist_DataBinding()
        {
            DataTable build_mailSetup_info = new DataTable();


            SqlDataReader reader;
            using (SqlConnection conn = new SqlConnection(ConfigurationManager.ConnectionStrings["myConnectionString"].ConnectionString))
            using (SqlCommand cmd = new SqlCommand("usp_WebFormSelect", conn))
            {

                try
                {
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.Parameters.Add("@query", SqlDbType.VarChar).Value = "mailsetup";
                    conn.Open();
                    reader = cmd.ExecuteReader();
                    build_mailSetup_info.Load(reader);

                    mixedmode_dropdownlist.DataSource = build_mailSetup_info;
                    mixedmode_dropdownlist.DataTextField = "MailSetup";
                    mixedmode_dropdownlist.DataValueField = "MailSetup";
                    mixedmode_dropdownlist.DataBind();
                }
                catch (Exception ex)
                {
                    Logging.LogException(ex, "Error while binding drop down list");
                }

            }
        }

        protected void maxdop_dropdownlist_DataBinding()
        {
            DataTable build_mailSetup_info = new DataTable();


            SqlDataReader reader;
            using (SqlConnection conn = new SqlConnection(ConfigurationManager.ConnectionStrings["myConnectionString"].ConnectionString))
            using (SqlCommand cmd = new SqlCommand("usp_WebFormSelect", conn))
            {

                try
                {
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.Parameters.Add("@query", SqlDbType.VarChar).Value = "mailsetup";
                    conn.Open();
                    reader = cmd.ExecuteReader();
                    build_mailSetup_info.Load(reader);

                    maxdop_dropdownlist.DataSource = build_mailSetup_info;
                    maxdop_dropdownlist.DataTextField = "MailSetup";
                    maxdop_dropdownlist.DataValueField = "MailSetup";
                    maxdop_dropdownlist.DataBind();
                }
                catch (Exception ex)
                {
                    Logging.LogException(ex, "Error while binding drop down list");
                }

            }
        }
        protected void threshold_dropdownlist_DataBinding()
        {
            DataTable build_mailSetup_info = new DataTable();


            SqlDataReader reader;
            using (SqlConnection conn = new SqlConnection(ConfigurationManager.ConnectionStrings["myConnectionString"].ConnectionString))
            using (SqlCommand cmd = new SqlCommand("usp_WebFormSelect", conn))
            {

                try
                {
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.Parameters.Add("@query", SqlDbType.VarChar).Value = "mailsetup";
                    conn.Open();
                    reader = cmd.ExecuteReader();
                    build_mailSetup_info.Load(reader);

                    threshold_dropdownlist.DataSource = build_mailSetup_info;
                    threshold_dropdownlist.DataTextField = "MailSetup";
                    threshold_dropdownlist.DataValueField = "MailSetup";
                    threshold_dropdownlist.DataBind();
                }
                catch (Exception ex)
                {
                    Logging.LogException(ex, "Error while binding drop down list");
                }

            }
        }
        protected void countset_dropdownlist_DataBinding()
        {
            DataTable build_mailSetup_info = new DataTable();


            SqlDataReader reader;
            using (SqlConnection conn = new SqlConnection(ConfigurationManager.ConnectionStrings["myConnectionString"].ConnectionString))
            using (SqlCommand cmd = new SqlCommand("usp_WebFormSelect", conn))
            {

                try
                {
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.Parameters.Add("@query", SqlDbType.VarChar).Value = "mailsetup";
                    conn.Open();
                    reader = cmd.ExecuteReader();
                    build_mailSetup_info.Load(reader);

                    countset_dropdownlist.DataSource = build_mailSetup_info;
                    countset_dropdownlist.DataTextField = "MailSetup";
                    countset_dropdownlist.DataValueField = "MailSetup";
                    countset_dropdownlist.DataBind();
                }
                catch (Exception ex)
                {
                    Logging.LogException(ex, "Error while binding drop down list");
                }

            }
        }

        protected void traceflag_dropdownlist_DataBinding()
        {
            DataTable build_mailSetup_info = new DataTable();


            SqlDataReader reader;
            using (SqlConnection conn = new SqlConnection(ConfigurationManager.ConnectionStrings["myConnectionString"].ConnectionString))
            using (SqlCommand cmd = new SqlCommand("usp_WebFormSelect", conn))
            {

                try
                {
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.Parameters.Add("@query", SqlDbType.VarChar).Value = "mailsetup";
                    conn.Open();
                    reader = cmd.ExecuteReader();
                    build_mailSetup_info.Load(reader);

                    traceflag_dropdownlist.DataSource = build_mailSetup_info;
                    traceflag_dropdownlist.DataTextField = "MailSetup";
                    traceflag_dropdownlist.DataValueField = "MailSetup";
                    traceflag_dropdownlist.DataBind();
                }
                catch (Exception ex)
                {
                    Logging.LogException(ex, "Error while binding drop down list");
                }

            }
        }

        protected void jobsverified_dropdownlist_DataBinding()
        {
            DataTable build_mailSetup_info = new DataTable();


            SqlDataReader reader;
            using (SqlConnection conn = new SqlConnection(ConfigurationManager.ConnectionStrings["myConnectionString"].ConnectionString))
            using (SqlCommand cmd = new SqlCommand("usp_WebFormSelect", conn))
            {

                try
                {
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.Parameters.Add("@query", SqlDbType.VarChar).Value = "mailsetup";
                    conn.Open();
                    reader = cmd.ExecuteReader();
                    build_mailSetup_info.Load(reader);

                    jobsverified_dropdownlist.DataSource = build_mailSetup_info;
                    jobsverified_dropdownlist.DataTextField = "MailSetup";
                    jobsverified_dropdownlist.DataValueField = "MailSetup";
                    jobsverified_dropdownlist.DataBind();
                }
                catch (Exception ex)
                {
                    Logging.LogException(ex, "Error while binding drop down list");
                }

            }
        }

        protected void jobssuccessful_dropdownlist_DataBinding()
        {
            DataTable build_mailSetup_info = new DataTable();


            SqlDataReader reader;
            using (SqlConnection conn = new SqlConnection(ConfigurationManager.ConnectionStrings["myConnectionString"].ConnectionString))
            using (SqlCommand cmd = new SqlCommand("usp_WebFormSelect", conn))
            {

                try
                {
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.Parameters.Add("@query", SqlDbType.VarChar).Value = "mailsetup";
                    conn.Open();
                    reader = cmd.ExecuteReader();
                    build_mailSetup_info.Load(reader);

                    jobssuccessful_dropdownlist.DataSource = build_mailSetup_info;
                    jobssuccessful_dropdownlist.DataTextField = "MailSetup";
                    jobssuccessful_dropdownlist.DataValueField = "MailSetup";
                    jobssuccessful_dropdownlist.DataBind();
                }
                catch (Exception ex)
                {
                    Logging.LogException(ex, "Error while binding drop down list");
                }

            }
        }

        protected void agentalerts_dropdownlist_DataBinding()
        {
            DataTable build_mailSetup_info = new DataTable();


            SqlDataReader reader;
            using (SqlConnection conn = new SqlConnection(ConfigurationManager.ConnectionStrings["myConnectionString"].ConnectionString))
            using (SqlCommand cmd = new SqlCommand("usp_WebFormSelect", conn))
            {

                try
                {
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.Parameters.Add("@query", SqlDbType.VarChar).Value = "mailsetup";
                    conn.Open();
                    reader = cmd.ExecuteReader();
                    build_mailSetup_info.Load(reader);

                    agentalerts_dropdownlist.DataSource = build_mailSetup_info;
                    agentalerts_dropdownlist.DataTextField = "MailSetup";
                    agentalerts_dropdownlist.DataValueField = "MailSetup";
                    agentalerts_dropdownlist.DataBind();
                }
                catch (Exception ex)
                {
                    Logging.LogException(ex, "Error while binding drop down list");
                }

            }
        }

        protected void securitysetup_dropdownlist_DataBinding()
        {
            DataTable build_mailSetup_info = new DataTable();


            SqlDataReader reader;
            using (SqlConnection conn = new SqlConnection(ConfigurationManager.ConnectionStrings["myConnectionString"].ConnectionString))
            using (SqlCommand cmd = new SqlCommand("usp_WebFormSelect", conn))
            {

                try
                {
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.Parameters.Add("@query", SqlDbType.VarChar).Value = "mailsetup";
                    conn.Open();
                    reader = cmd.ExecuteReader();
                    build_mailSetup_info.Load(reader);

                    securitysetup_dropdownlist.DataSource = build_mailSetup_info;
                    securitysetup_dropdownlist.DataTextField = "MailSetup";
                    securitysetup_dropdownlist.DataValueField = "MailSetup";
                    securitysetup_dropdownlist.DataBind();
                }
                catch (Exception ex)
                {
                    Logging.LogException(ex, "Error while binding drop down list");
                }

            }
        }

        protected void accountscorrect_dropdownlist_DataBinding()
        {
            DataTable build_mailSetup_info = new DataTable();


            SqlDataReader reader;
            using (SqlConnection conn = new SqlConnection(ConfigurationManager.ConnectionStrings["myConnectionString"].ConnectionString))
            using (SqlCommand cmd = new SqlCommand("usp_WebFormSelect", conn))
            {

                try
                {
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.Parameters.Add("@query", SqlDbType.VarChar).Value = "mailsetup";
                    conn.Open();
                    reader = cmd.ExecuteReader();
                    build_mailSetup_info.Load(reader);

                    accountscorrect_dropdownlist.DataSource = build_mailSetup_info;
                    accountscorrect_dropdownlist.DataTextField = "MailSetup";
                    accountscorrect_dropdownlist.DataValueField = "MailSetup";
                    accountscorrect_dropdownlist.DataBind();
                }
                catch (Exception ex)
                {
                    Logging.LogException(ex, "Error while binding drop down list");
                }

            }
        }

        protected void accountsstored_dropdownlist_DataBinding()
        {
            DataTable build_mailSetup_info = new DataTable();


            SqlDataReader reader;
            using (SqlConnection conn = new SqlConnection(ConfigurationManager.ConnectionStrings["myConnectionString"].ConnectionString))
            using (SqlCommand cmd = new SqlCommand("usp_WebFormSelect", conn))
            {

                try
                {
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.Parameters.Add("@query", SqlDbType.VarChar).Value = "mailsetup";
                    conn.Open();
                    reader = cmd.ExecuteReader();
                    build_mailSetup_info.Load(reader);

                    accountsstored_dropdownlist.DataSource = build_mailSetup_info;
                    accountsstored_dropdownlist.DataTextField = "MailSetup";
                    accountsstored_dropdownlist.DataValueField = "MailSetup";
                    accountsstored_dropdownlist.DataBind();
                }
                catch (Exception ex)
                {
                    Logging.LogException(ex, "Error while binding drop down list");
                }

            }
        }
        protected void submit_Click(object sender, EventArgs e)
        {
            string serverName = lblhead_servername.Text;

            string buildResource = Resource_name_dropdownlist.SelectedItem.Text;
            string resource_notes = Request.Form["bld_resource_notes"];

            string dbadb_created = dbadb_create_dropdownlist.SelectedItem.Text;
            string dbadb_notes = Request.Form["bld_dbadb_notes"];

            string memory_capped = memory_capped_dropdownlist.SelectedItem.Text;
            string memorycapped_notes = Request.Form["bld_memorycapped_notes"];

            string initial_backup = Initial_backup_dropdownlist.SelectedItem.Text;
            string initialbackup_notes = Request.Form["bld_initialbackup_notes"];

            string backup_scheduled = backup_scheduled_dropdownlist.SelectedItem.Text;
            string backupscheduled_notes = Request.Form["bld_backupscheduled_notes"];

            string golive_date = inpHide_build.Value;
            string golive_notes = Request.Form["bld_golivedate_notes"];

            string bdrivelayout_follow = drive_layout_dropdownlist.SelectedItem.Text;
            string drivelayout_notes = Request.Form["bld_drivelayout_notes"];

            string sql_version = sql_version_dropdownlist.SelectedItem.Text;
            string sqlversion_notes = Request.Form["bld_sqlversion_notes"];

            string monitoring_tool = monitor_tool_dropdownlist.SelectedItem.Text;
            string monitortool_notes = Request.Form["bld_monitortool_notes"];

            string highavailbility_option = high_availability_dropdownlist.SelectedItem.Text;
            string highavailability_notes = Request.Form["bld_highavailability_notes"];

            string processor_acknowledge = processors_core_acknowledge_dropdownlist.SelectedItem.Text;
            string processoracknowledge_notes = Request.Form["bld_processoracknowledge_notes"];

            string mail_setup = mail_setup_dropdownlist.SelectedItem.Text;
            string mail_setup_notes = Request.Form["bld_mail_setup_notes"];



            string memory_correct = memory_correct_dropdownlist.SelectedItem.Text;
            string memory_correct_notes = Request.Form["memory_correct_notes"];

            string admin_correct = admin_correct_dropdownlist.SelectedItem.Text;
            string admin_correct_notes = Request.Form["admin_correct_notes"];

            string services_disabled = services_dropdownlist.SelectedItem.Text;
            string services_disabled_notes = Request.Form["services_notes"];

            string maintenance_set = maintenance_dropdownlist.SelectedItem.Text;
            string maintenance_set_notes = Request.Form["maintenance_notes"];

            string pagelock = pagelock_dropdownlist.SelectedItem.Text;
            string pagelock_notes = Request.Form["pagelock_notes"];

            string version_correct = version_dropdownlist.SelectedItem.Text;
            string versioncorrect_notes = Request.Form["version_notes"];

            string maxdop_set = maxdop_dropdownlist.SelectedItem.Text;
            string maxdop_set_notes = Request.Form["maxdop_notes"];

            string threshold = threshold_dropdownlist.SelectedItem.Text;
            string threshold_notes = Request.Form["threshold_notes"];

            string mixedmode = mixedmode_dropdownlist.SelectedItem.Text;
            string mixedmode_notes = Request.Form["mixedmode_notes"];

            string countset = countset_dropdownlist.SelectedItem.Text;
            string countset_notes = Request.Form["countset_notes"];

            string traceflag = traceflag_dropdownlist.SelectedItem.Text;
            string traceflag_notes = Request.Form["traceflag_notes"];

            string jobsverified = jobsverified_dropdownlist.SelectedItem.Text;
            string jobsverified_notes = Request.Form["jobsverified_notes"];

            string jobssuccessful = jobssuccessful_dropdownlist.SelectedItem.Text;
            string jobssuccessful_notes = Request.Form["jobssuccessful_notes"];

            string agentalerts = agentalerts_dropdownlist.SelectedItem.Text;
            string agentalerts_notes = Request.Form["agentalerts_notes"];

            string securitysetup = securitysetup_dropdownlist.SelectedItem.Text;
            string securitysetup_notes = Request.Form["securitysetup_notes"];

            string accountscorrect = accountscorrect_dropdownlist.SelectedItem.Text;
            string accountscorrect_notes = Request.Form["accountscorrect_notes"];

            string accountsstored = accountsstored_dropdownlist.SelectedItem.Text;
            string accountsstored_notes = Request.Form["accountsstored_notes"];

            string overallbuild_notes = Request.Form["bld_overall_notes"];

            string connString = ConfigurationManager.ConnectionStrings["myConnectionString"].ConnectionString;
            SqlConnection conn = null;
            try
            {
                conn = new SqlConnection(connString);
                conn.Open();

                using (SqlCommand cmd = new SqlCommand())
                {
                    cmd.Connection = conn;
                    cmd.CommandType = CommandType.Text;
                    cmd.CommandText = "UPDATE BUILDFORM  SET [BuildResource]=@buildresource,[Resource_Notes]=@resourcenotes,[dbadbCreated]=@dbadb,[dbadbCreated_Notes]=@dbadbnotes,[MemoryCapped]=@memorycapped,[MemoryCapped_Notes]=@memorycappednotes,[InitialBackup]=@initialbackup,[InitialBackup_Notes]=@initialbackupnotes,[BackupScheduled]=@backupscheduled,[BackupScheduled_Notes]=@backupschedulednotes,[GOLiveDate]=@golivedate,[GOLiveDate_Notes]=@golivedatenotes,[FollowDriveLayout]=@drivelayout,[FollowDriveLayout_Notes]=@drivelayoutnotes,[SQLVersion]=@sqlversion,[SQLVersion_Notes]=@sqlversionnotes,[MonitoringTool]=@monitoringtool,[MonitoringTool_Notes]=@monitoringtoolnotes,[HighAvailability]=@highavailability,[HighAvailability_Notes]=@highavailabilitynotes,[No.ofProcessorsandcores]=@processoracknowledge,[No.ofProcessorsandcores_Notes]=@processoracknowledgenotes,[MailSetup]=@mailsetup,[MailSetup_Notes]=@mailsetupnotes,[OverallBuildnotes]=@overallbuildnotes, [MemoryCorrect]=@memorycorrect,[MemoryCorrect_Notes]=@memorycorrectnotes,[ServerAdministrators]=@admincorrect,[ServerAdministrators_Notes]=@admincorrectnotes,[ServicesDisabled]=@servicesdisabled,[ServicesDisabled_Notes]=@servicesdisablednotes,[MaintenanceSet]=@maintenanceset,[MaintenanceSet_Notes]=@maintenancesetnotes,[PagesLocked]=@pagelock,[PagesLocked_Notes]=@pagelocknotes,[VersionCorrect]=@versioncorrect,[VersionCorrect_Notes]=@versioncorrectnotes,[MaxdopSet]=@maxdop,[MaxdopSet_Notes]=@maxdopnotes,[CostThreshold]=@threshold,[CostThreshold_Notes]=@thresholdnotes,[AuthenticationMode]=@mixedmode,[AuthenticationMode_Notes]=@mixedmodenotes,[CountSet]=@countset,[CountSet_Notes]=@countsetnotes,[TraceFlag]=@traceflag,[TraceFlag_Notes]=@traceflagnotes,[JobsVerified]=@jobsverified,[JobsVerified_Notes]=@jobsverifiednotes,[JobsSucessful]=@jobssuccessful,[JobsSucessful_Notes]=@jobssuccessfulnotes,[AgentAlerts]=@agentalerts,[AgentAlerts_Notes]=@agentalertsnotes,[SecuritySetup]=@securitysetup,[SecuritySetup_Notes]=@securitysetupnotes,[AccountsCorrect]=@accountscorrect,[AccountsCorrect_Notes]=@accountscorrectnotes,[AccountsStored]=@accountsstored,[AccountsStored_Notes]=@accountsstorednotes WHERE [ServerName] = @serevrname";

                    SqlParameter[] param = new SqlParameter[63];

                    param[3] = new SqlParameter("@serevrname", SqlDbType.NVarChar, 50);
                    param[4] = new SqlParameter("@buildresource", SqlDbType.NVarChar, 50);
                    param[5] = new SqlParameter("@resourcenotes", SqlDbType.NVarChar, 255);
                    param[6] = new SqlParameter("@dbadb", SqlDbType.NVarChar, 50);
                    param[7] = new SqlParameter("@dbadbnotes", SqlDbType.NVarChar, 255);
                    param[8] = new SqlParameter("@memorycapped", SqlDbType.NVarChar, 50);
                    param[9] = new SqlParameter("@memorycappednotes", SqlDbType.NVarChar, 255);
                    param[10] = new SqlParameter("@initialbackup", SqlDbType.NVarChar, 50);
                    param[11] = new SqlParameter("@initialbackupnotes", SqlDbType.NVarChar, 255);
                    param[12] = new SqlParameter("@backupscheduled", SqlDbType.NVarChar, 50);
                    param[13] = new SqlParameter("@backupschedulednotes", SqlDbType.NVarChar, 255);
                    param[14] = new SqlParameter("@golivedate", SqlDbType.NVarChar, 50);
                    param[15] = new SqlParameter("@golivedatenotes", SqlDbType.NVarChar, 255);
                    param[16] = new SqlParameter("@drivelayout", SqlDbType.NVarChar, 50);
                    param[17] = new SqlParameter("@drivelayoutnotes", SqlDbType.NVarChar, 255);
                    param[18] = new SqlParameter("@sqlversion", SqlDbType.NVarChar, 50);
                    param[19] = new SqlParameter("@sqlversionnotes", SqlDbType.NVarChar, 255);
                    param[20] = new SqlParameter("@monitoringtool", SqlDbType.NVarChar, 50);
                    param[21] = new SqlParameter("@monitoringtoolnotes", SqlDbType.NVarChar, 255);
                    param[22] = new SqlParameter("@highavailability", SqlDbType.NVarChar, 50);
                    param[23] = new SqlParameter("@highavailabilitynotes", SqlDbType.NVarChar, 255);
                    param[24] = new SqlParameter("@processoracknowledge", SqlDbType.NVarChar, 50);
                    param[25] = new SqlParameter("@processoracknowledgenotes", SqlDbType.NVarChar, 255);
                    param[26] = new SqlParameter("@mailsetup", SqlDbType.NVarChar, 50);
                    param[27] = new SqlParameter("@mailsetupnotes", SqlDbType.NVarChar, 255);
                    param[28] = new SqlParameter("@overallbuildnotes", SqlDbType.NVarChar, 100);
                    param[29] = new SqlParameter("@memorycorrect", SqlDbType.NVarChar, 50);
                    param[30] = new SqlParameter("@memorycorrectnotes", SqlDbType.NVarChar, 255);
                    param[31] = new SqlParameter("@admincorrect", SqlDbType.NVarChar, 50);
                    param[32] = new SqlParameter("@admincorrectnotes", SqlDbType.NVarChar, 255);
                    param[33] = new SqlParameter("@servicesdisabled", SqlDbType.NVarChar, 50);
                    param[34] = new SqlParameter("@servicesdisablednotes", SqlDbType.NVarChar, 255);
                    param[35] = new SqlParameter("@maintenanceset", SqlDbType.NVarChar, 50);
                    param[36] = new SqlParameter("@maintenancesetnotes", SqlDbType.NVarChar, 255);
                    param[37] = new SqlParameter("@pagelock", SqlDbType.NVarChar, 50);
                    param[38] = new SqlParameter("@pagelocknotes", SqlDbType.NVarChar, 255);
                    param[39] = new SqlParameter("@versioncorrect", SqlDbType.NVarChar, 50);
                    param[40] = new SqlParameter("@versioncorrectnotes", SqlDbType.NVarChar, 255);
                    param[41] = new SqlParameter("@maxdop", SqlDbType.NVarChar, 50);
                    param[42] = new SqlParameter("@maxdopnotes", SqlDbType.NVarChar, 255);
                    param[43] = new SqlParameter("@threshold", SqlDbType.NVarChar, 50);
                    param[44] = new SqlParameter("@thresholdnotes", SqlDbType.NVarChar, 255);
                    param[45] = new SqlParameter("@mixedmode", SqlDbType.NVarChar, 50);
                    param[46] = new SqlParameter("@mixedmodenotes", SqlDbType.NVarChar, 255);
                    param[47] = new SqlParameter("@countset", SqlDbType.NVarChar, 50);
                    param[48] = new SqlParameter("@countsetnotes", SqlDbType.NVarChar, 255);
                    param[49] = new SqlParameter("@traceflag", SqlDbType.NVarChar, 50);
                    param[50] = new SqlParameter("@traceflagnotes", SqlDbType.NVarChar, 255);
                    param[51] = new SqlParameter("@jobsverified", SqlDbType.NVarChar, 50);
                    param[52] = new SqlParameter("@jobsverifiednotes", SqlDbType.NVarChar, 255);
                    param[53] = new SqlParameter("@jobssuccessful", SqlDbType.NVarChar, 50);
                    param[54] = new SqlParameter("@jobssuccessfulnotes", SqlDbType.NVarChar, 255);
                    param[55] = new SqlParameter("@agentalerts", SqlDbType.NVarChar, 50);
                    param[56] = new SqlParameter("@agentalertsnotes", SqlDbType.NVarChar, 255);
                    param[57] = new SqlParameter("@securitysetup", SqlDbType.NVarChar, 50);
                    param[58] = new SqlParameter("@securitysetupnotes", SqlDbType.NVarChar, 255);
                    param[59] = new SqlParameter("@accountscorrect", SqlDbType.NVarChar, 50);
                    param[60] = new SqlParameter("@accountscorrectnotes", SqlDbType.NVarChar, 255);
                    param[61] = new SqlParameter("@accountsstored", SqlDbType.NVarChar, 50);
                    param[62] = new SqlParameter("@accountsstorednotes", SqlDbType.NVarChar, 255);


                    param[3].Value = serverName;
                    param[4].Value = buildResource;
                    param[5].Value = resource_notes;
                    param[6].Value = dbadb_created;
                    param[7].Value = dbadb_notes;
                    param[8].Value = memory_capped;
                    param[9].Value = memorycapped_notes;
                    param[10].Value = initial_backup;
                    param[11].Value = initialbackup_notes;
                    param[12].Value = backup_scheduled;
                    param[13].Value = backupscheduled_notes;
                    param[14].Value = golive_date;
                    param[15].Value = golive_notes;
                    param[16].Value = bdrivelayout_follow;
                    param[17].Value = drivelayout_notes;
                    param[18].Value = sql_version;
                    param[19].Value = sqlversion_notes;
                    param[20].Value = monitoring_tool;
                    param[21].Value = monitortool_notes;
                    param[22].Value = highavailbility_option;
                    param[23].Value = highavailability_notes;
                    param[24].Value = processor_acknowledge;
                    param[25].Value = processoracknowledge_notes;
                    param[26].Value = mail_setup;
                    param[27].Value = mail_setup_notes;
                    param[28].Value = overallbuild_notes;
                    param[29].Value = memory_correct;
                    param[30].Value = memory_correct_notes;
                    param[31].Value = admin_correct;
                    param[32].Value = admin_correct_notes;
                    param[33].Value = services_disabled;
                    param[34].Value = services_disabled_notes;
                    param[35].Value = maintenance_set;
                    param[36].Value = maintenance_set_notes;
                    param[37].Value = pagelock;
                    param[38].Value = pagelock_notes;
                    param[39].Value = version_correct;
                    param[40].Value = versioncorrect_notes;
                    param[41].Value = maxdop_set;
                    param[42].Value = maxdop_set_notes;
                    param[43].Value = threshold;
                    param[44].Value = threshold_notes;
                    param[45].Value = mixedmode;
                    param[46].Value = mixedmode_notes;
                    param[47].Value = countset;
                    param[48].Value = countset_notes;
                    param[49].Value = traceflag;
                    param[50].Value = traceflag_notes;
                    param[51].Value = jobsverified;
                    param[52].Value = jobsverified_notes;
                    param[53].Value = jobssuccessful;
                    param[54].Value = jobssuccessful_notes;
                    param[55].Value = agentalerts;
                    param[56].Value = agentalerts_notes;
                    param[57].Value = securitysetup;
                    param[58].Value = securitysetup_notes;
                    param[59].Value = accountscorrect;
                    param[60].Value = accountscorrect_notes;
                    param[61].Value = accountsstored;
                    param[62].Value = accountsstored_notes;


                    for (int i = 3; i < param.Length; i++)
                    {
                        cmd.Parameters.Add(param[i]);
                    }


                    int rowsAffected = cmd.ExecuteNonQuery();
                    string url = ResolveUrl("~/EditBuildForm.aspx");
                    if (rowsAffected == 1)
                        Response.Write(String.Format("<script>alert('The records are updated in to database successfully!');window.location='{0}';</script>", url));
                    else
                        Response.Write(String.Format("<script>alert('OOps there was an error while updating in to database!');window.location='{0}';</script>", url));
                }
            }
            catch (Exception ex)
            {
                string url = ResolveUrl("~/EditBuildForm.aspx");
                Response.Write(String.Format("<script>alert('OOps there was an error while updating in to database!');window.location='{0}';</script>", url));
            }
            finally
            {
                if (conn != null)
                {
                    conn.Close();
                }
            }
        }
    }
}